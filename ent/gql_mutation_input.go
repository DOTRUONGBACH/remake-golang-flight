// Code generated by ent, DO NOT EDIT.

package ent

import (
	"jet/ent/account"
	"jet/ent/customer"
	"time"

	"github.com/google/uuid"
)

// CreateAccountInput represents a mutation input for creating accounts.
type CreateAccountInput struct {
	Email      string
	Password   string
	Role       account.Role
	Status     account.Status
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	AccOwnerID *uuid.UUID
}

// Mutate applies the CreateAccountInput on the AccountMutation builder.
func (i *CreateAccountInput) Mutate(m *AccountMutation) {
	m.SetEmail(i.Email)
	m.SetPassword(i.Password)
	m.SetRole(i.Role)
	m.SetStatus(i.Status)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.AccOwnerID; v != nil {
		m.SetAccOwnerID(*v)
	}
}

// SetInput applies the change-set in the CreateAccountInput on the AccountCreate builder.
func (c *AccountCreate) SetInput(i CreateAccountInput) *AccountCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateAccountInput represents a mutation input for updating accounts.
type UpdateAccountInput struct {
	Email         *string
	Password      *string
	Role          *account.Role
	Status        *account.Status
	UpdatedAt     *time.Time
	ClearAccOwner bool
	AccOwnerID    *uuid.UUID
}

// Mutate applies the UpdateAccountInput on the AccountMutation builder.
func (i *UpdateAccountInput) Mutate(m *AccountMutation) {
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearAccOwner {
		m.ClearAccOwner()
	}
	if v := i.AccOwnerID; v != nil {
		m.SetAccOwnerID(*v)
	}
}

// SetInput applies the change-set in the UpdateAccountInput on the AccountUpdate builder.
func (c *AccountUpdate) SetInput(i UpdateAccountInput) *AccountUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateAccountInput on the AccountUpdateOne builder.
func (c *AccountUpdateOne) SetInput(i UpdateAccountInput) *AccountUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCustomerInput represents a mutation input for creating customers.
type CreateCustomerInput struct {
	Fullname    string
	Phone       string
	Address     string
	Gender      customer.Gender
	CitizenID   string
	DateOfBirth time.Time
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	AccountIDs  []uuid.UUID
}

// Mutate applies the CreateCustomerInput on the CustomerMutation builder.
func (i *CreateCustomerInput) Mutate(m *CustomerMutation) {
	m.SetFullname(i.Fullname)
	m.SetPhone(i.Phone)
	m.SetAddress(i.Address)
	m.SetGender(i.Gender)
	m.SetCitizenID(i.CitizenID)
	m.SetDateOfBirth(i.DateOfBirth)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.AccountIDs; len(v) > 0 {
		m.AddAccountIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCustomerInput on the CustomerCreate builder.
func (c *CustomerCreate) SetInput(i CreateCustomerInput) *CustomerCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCustomerInput represents a mutation input for updating customers.
type UpdateCustomerInput struct {
	Fullname         *string
	Phone            *string
	Address          *string
	Gender           *customer.Gender
	CitizenID        *string
	DateOfBirth      *time.Time
	UpdatedAt        *time.Time
	ClearAccounts    bool
	AddAccountIDs    []uuid.UUID
	RemoveAccountIDs []uuid.UUID
}

// Mutate applies the UpdateCustomerInput on the CustomerMutation builder.
func (i *UpdateCustomerInput) Mutate(m *CustomerMutation) {
	if v := i.Fullname; v != nil {
		m.SetFullname(*v)
	}
	if v := i.Phone; v != nil {
		m.SetPhone(*v)
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if v := i.Gender; v != nil {
		m.SetGender(*v)
	}
	if v := i.CitizenID; v != nil {
		m.SetCitizenID(*v)
	}
	if v := i.DateOfBirth; v != nil {
		m.SetDateOfBirth(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearAccounts {
		m.ClearAccounts()
	}
	if v := i.AddAccountIDs; len(v) > 0 {
		m.AddAccountIDs(v...)
	}
	if v := i.RemoveAccountIDs; len(v) > 0 {
		m.RemoveAccountIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCustomerInput on the CustomerUpdate builder.
func (c *CustomerUpdate) SetInput(i UpdateCustomerInput) *CustomerUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCustomerInput on the CustomerUpdateOne builder.
func (c *CustomerUpdateOne) SetInput(i UpdateCustomerInput) *CustomerUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
