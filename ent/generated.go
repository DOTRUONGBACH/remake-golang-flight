// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package ent

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type AccountLoginResponse struct {
	Token  string `json:"token"`
	Status bool   `json:"status"`
}

type AccountOps struct {
	Signup *Account              `json:"Signup"`
	Login  *AccountLoginResponse `json:"Login"`
}

type CustomerInput struct {
	Name      string         `json:"name"`
	CitizenID string         `json:"citizenId"`
	Phone     string         `json:"phone"`
	Address   string         `json:"address"`
	Gender    CustomerGender `json:"gender"`
	Dob       time.Time      `json:"dob"`
}

type Login struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type NewAccountInput struct {
	Customer *CustomerInput `json:"customer"`
	Email    string         `json:"email"`
	Password string         `json:"password"`
	Role     Role           `json:"role"`
}

type Signup struct {
	Customer *CustomerInput `json:"customer"`
	Email    string         `json:"email"`
	Password string         `json:"password"`
	Role     Role           `json:"role"`
}

type AccountStatus string

const (
	AccountStatusInactive AccountStatus = "Inactive"
	AccountStatusActive   AccountStatus = "Active"
)

var AllAccountStatus = []AccountStatus{
	AccountStatusInactive,
	AccountStatusActive,
}

func (e AccountStatus) IsValid() bool {
	switch e {
	case AccountStatusInactive, AccountStatusActive:
		return true
	}
	return false
}

func (e AccountStatus) String() string {
	return string(e)
}

func (e *AccountStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccountStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccountStatus", str)
	}
	return nil
}

func (e AccountStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CustomerGender string

const (
	CustomerGenderMale   CustomerGender = "Male"
	CustomerGenderFemale CustomerGender = "Female"
	CustomerGenderOther  CustomerGender = "Other"
)

var AllCustomerGender = []CustomerGender{
	CustomerGenderMale,
	CustomerGenderFemale,
	CustomerGenderOther,
}

func (e CustomerGender) IsValid() bool {
	switch e {
	case CustomerGenderMale, CustomerGenderFemale, CustomerGenderOther:
		return true
	}
	return false
}

func (e CustomerGender) String() string {
	return string(e)
}

func (e *CustomerGender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerGender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerGender", str)
	}
	return nil
}

func (e CustomerGender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Gender string

const (
	GenderMale   Gender = "Male"
	GenderFemale Gender = "Female"
	GenderOther  Gender = "Other"
)

var AllGender = []Gender{
	GenderMale,
	GenderFemale,
	GenderOther,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderMale, GenderFemale, GenderOther:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleAdmin      Role = "Admin"
	RoleSubscriber Role = "Subscriber"
	RoleCustomer   Role = "Customer"
)

var AllRole = []Role{
	RoleAdmin,
	RoleSubscriber,
	RoleCustomer,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleSubscriber, RoleCustomer:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
