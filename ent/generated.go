// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package ent

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type AccountConnection struct {
	Edges      []*AccountEdge `json:"edges,omitempty"`
	PageInfo   *PageInfo      `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

type AccountEdge struct {
	Node   *Account `json:"node,omitempty"`
	Cursor string   `json:"cursor"`
}

type AccountLoginResponse struct {
	Token  string `json:"token"`
	Status bool   `json:"status"`
}

type CustomerConnection struct {
	Edges      []*CustomerEdge `json:"edges,omitempty"`
	PageInfo   *PageInfo       `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

type CustomerEdge struct {
	Node   *Customer `json:"node,omitempty"`
	Cursor string    `json:"cursor"`
}

type CustomerInput struct {
	Name      string         `json:"name"`
	CitizenID string         `json:"citizenId"`
	Phone     string         `json:"phone"`
	Address   string         `json:"address"`
	Gender    CustomerGender `json:"gender"`
	Dob       time.Time      `json:"dob"`
}

type CustomerOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *CustomerOrderField `json:"field,omitempty"`
}

type Login struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor,omitempty"`
	EndCursor       *string `json:"endCursor,omitempty"`
}

type Signup struct {
	Customer *CustomerInput `json:"customer"`
	Email    string         `json:"email"`
	Password string         `json:"password"`
	Role     Role           `json:"role"`
}

type AccountOrderfield string

const (
	AccountOrderfieldID        AccountOrderfield = "ID"
	AccountOrderfieldEmail     AccountOrderfield = "EMAIL"
	AccountOrderfieldCreatedAt AccountOrderfield = "CREATED_AT"
	AccountOrderfieldUpdatedAt AccountOrderfield = "UPDATED_AT"
)

var AllAccountOrderfield = []AccountOrderfield{
	AccountOrderfieldID,
	AccountOrderfieldEmail,
	AccountOrderfieldCreatedAt,
	AccountOrderfieldUpdatedAt,
}

func (e AccountOrderfield) IsValid() bool {
	switch e {
	case AccountOrderfieldID, AccountOrderfieldEmail, AccountOrderfieldCreatedAt, AccountOrderfieldUpdatedAt:
		return true
	}
	return false
}

func (e AccountOrderfield) String() string {
	return string(e)
}

func (e *AccountOrderfield) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccountOrderfield(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccountOrderfield", str)
	}
	return nil
}

func (e AccountOrderfield) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AccountStatus string

const (
	AccountStatusInactive AccountStatus = "Inactive"
	AccountStatusActive   AccountStatus = "Active"
)

var AllAccountStatus = []AccountStatus{
	AccountStatusInactive,
	AccountStatusActive,
}

func (e AccountStatus) IsValid() bool {
	switch e {
	case AccountStatusInactive, AccountStatusActive:
		return true
	}
	return false
}

func (e AccountStatus) String() string {
	return string(e)
}

func (e *AccountStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccountStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccountStatus", str)
	}
	return nil
}

func (e AccountStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CustomerGender string

const (
	CustomerGenderMale   CustomerGender = "Male"
	CustomerGenderFemale CustomerGender = "Female"
	CustomerGenderOther  CustomerGender = "Other"
)

var AllCustomerGender = []CustomerGender{
	CustomerGenderMale,
	CustomerGenderFemale,
	CustomerGenderOther,
}

func (e CustomerGender) IsValid() bool {
	switch e {
	case CustomerGenderMale, CustomerGenderFemale, CustomerGenderOther:
		return true
	}
	return false
}

func (e CustomerGender) String() string {
	return string(e)
}

func (e *CustomerGender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerGender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerGender", str)
	}
	return nil
}

func (e CustomerGender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type CustomerOrderField string

const (
	CustomerOrderFieldID        CustomerOrderField = "ID"
	CustomerOrderFieldName      CustomerOrderField = "NAME"
	CustomerOrderFieldEmail     CustomerOrderField = "EMAIL"
	CustomerOrderFieldCreatedAt CustomerOrderField = "CREATED_AT"
	CustomerOrderFieldUpdatedAt CustomerOrderField = "UPDATED_AT"
)

var AllCustomerOrderField = []CustomerOrderField{
	CustomerOrderFieldID,
	CustomerOrderFieldName,
	CustomerOrderFieldEmail,
	CustomerOrderFieldCreatedAt,
	CustomerOrderFieldUpdatedAt,
}

func (e CustomerOrderField) IsValid() bool {
	switch e {
	case CustomerOrderFieldID, CustomerOrderFieldName, CustomerOrderFieldEmail, CustomerOrderFieldCreatedAt, CustomerOrderFieldUpdatedAt:
		return true
	}
	return false
}

func (e CustomerOrderField) String() string {
	return string(e)
}

func (e *CustomerOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerOrderField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerOrderField", str)
	}
	return nil
}

func (e CustomerOrderField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Gender string

const (
	GenderMale   Gender = "Male"
	GenderFemale Gender = "Female"
	GenderOther  Gender = "Other"
)

var AllGender = []Gender{
	GenderMale,
	GenderFemale,
	GenderOther,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderMale, GenderFemale, GenderOther:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderDirection string

const (
	OrderDirectionAsc  OrderDirection = "ASC"
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleAdmin      Role = "Admin"
	RoleSubscriber Role = "Subscriber"
	RoleCustomer   Role = "Customer"
)

var AllRole = []Role{
	RoleAdmin,
	RoleSubscriber,
	RoleCustomer,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleSubscriber, RoleCustomer:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
