package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"jet/ent"
	graphql1 "jet/graphql"
)

// Signup is the resolver for the Signup field.
func (r *accountOpsResolver) Signup(ctx context.Context, obj *ent.AccountOps, input ent.NewAccountInput) (*ent.Account, error) {
	// is_authenticated := auth.ForContext(ctx)

	// if is_authenticated.Role != "Administrator" {
	// 	return nil, util.WrapGQLUnauthenticatedError(ctx)
	// }

	return r.accountService.Signup(ctx, input)
}

// Login is the resolver for the login field.
func (r *accountOpsResolver) Login(ctx context.Context, obj *ent.AccountOps, input ent.Login) (*ent.AccountLoginResponse, error) {
	res, err := r.accountService.Login(ctx, input)
	return &ent.AccountLoginResponse{
		Token:  res.Token,
		Status: res.Status,
	}, err
}

// Account is the resolver for the Account field.
func (r *mutationResolver) Account(ctx context.Context) (*ent.AccountOps, error) {
	return &ent.AccountOps{}, nil
}

// AccountOps returns graphql1.AccountOpsResolver implementation.
func (r *Resolver) AccountOps() graphql1.AccountOpsResolver { return &accountOpsResolver{r} }

// Mutation returns graphql1.MutationResolver implementation.
func (r *Resolver) Mutation() graphql1.MutationResolver { return &mutationResolver{r} }

type accountOpsResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
