package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"
	"jet/ent"
	graphql1 "jet/graphql"

	"entgo.io/contrib/entgql"
	"github.com/google/uuid"
)

// Accounts is the resolver for the Accounts field.
func (r *accountQueryResolver) Accounts(ctx context.Context, obj *ent.AccountQuery, after *entgql.Cursor[uuid.UUID], first *int, before *entgql.Cursor[uuid.UUID], last *int, orderBy *ent.AccountOrder) (*ent.AccountConnection, error) {
	return r.client.Account.Query().Paginate(ctx, after, first, before, last, ent.WithAccountOrder(orderBy))
}

// Customers is the resolver for the Customers field.
func (r *customerQueryResolver) Customers(ctx context.Context, obj *ent.CustomerQuery, after *entgql.Cursor[uuid.UUID], first *int, before *entgql.Cursor[uuid.UUID], last *int, orderBy *ent.CustomerOrder) (*ent.CustomerConnection, error) {
	panic(fmt.Errorf("not implemented: Customers - Customers"))
}

// Account is the resolver for the Account field.
func (r *queryResolver) Account(ctx context.Context) (*ent.AccountQuery, error) {
	panic(fmt.Errorf("not implemented: Account - Account"))
}

// Customer is the resolver for the Customer field.
func (r *queryResolver) Customer(ctx context.Context) (*ent.CustomerQuery, error) {
	panic(fmt.Errorf("not implemented: Customer - Customer"))
}

// AccountQuery returns graphql1.AccountQueryResolver implementation.
func (r *Resolver) AccountQuery() graphql1.AccountQueryResolver { return &accountQueryResolver{r} }

// CustomerQuery returns graphql1.CustomerQueryResolver implementation.
func (r *Resolver) CustomerQuery() graphql1.CustomerQueryResolver { return &customerQueryResolver{r} }

// Query returns graphql1.QueryResolver implementation.
func (r *Resolver) Query() graphql1.QueryResolver { return &queryResolver{r} }

type accountQueryResolver struct{ *Resolver }
type customerQueryResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
