package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"
	"jet/ent"
	graphql1 "jet/graphql"
	"time"
)

// Name is the resolver for the name field.
func (r *customerResolver) Name(ctx context.Context, obj *ent.Customer) (string, error) {
	panic(fmt.Errorf("not implemented: Name - name"))
}

// CitizenID is the resolver for the citizenId field.
func (r *customerResolver) CitizenID(ctx context.Context, obj *ent.Customer) (string, error) {
	panic(fmt.Errorf("not implemented: CitizenID - citizenId"))
}

// Phone is the resolver for the phone field.
func (r *customerResolver) Phone(ctx context.Context, obj *ent.Customer) (string, error) {
	panic(fmt.Errorf("not implemented: Phone - phone"))
}

// Address is the resolver for the address field.
func (r *customerResolver) Address(ctx context.Context, obj *ent.Customer) (string, error) {
	panic(fmt.Errorf("not implemented: Address - address"))
}

// Gender is the resolver for the gender field.
func (r *customerResolver) Gender(ctx context.Context, obj *ent.Customer) (ent.CustomerGender, error) {
	panic(fmt.Errorf("not implemented: Gender - gender"))
}

// Dob is the resolver for the dob field.
func (r *customerResolver) Dob(ctx context.Context, obj *ent.Customer) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: Dob - dob"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *customerResolver) CreatedAt(ctx context.Context, obj *ent.Customer) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *customerResolver) UpdatedAt(ctx context.Context, obj *ent.Customer) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// Customer returns graphql1.CustomerResolver implementation.
func (r *Resolver) Customer() graphql1.CustomerResolver { return &customerResolver{r} }

type customerResolver struct{ *Resolver }
